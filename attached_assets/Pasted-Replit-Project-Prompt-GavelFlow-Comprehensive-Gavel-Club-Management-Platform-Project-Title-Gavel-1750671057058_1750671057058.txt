Replit Project Prompt: GavelFlow - Comprehensive Gavel Club Management Platform
Project Title: GavelFlow: Comprehensive Gavel Club Management System with PostgreSQL
Project Description: Develop a full-stack web application, "GavelFlow," to streamline the operations and enhance the member experience of a Gavel Club, similar in format to Toastmasters International. The application will cater to both general members and the Executive Committee (ExCo), offering distinct functionalities and user interfaces. The system will leverage a robust Node.js/Express backend with a PostgreSQL database for data management and a React frontend for a modern, attractive, and fully responsive user experience. The application will focus on core club management, member progress tracking, and providing a rich, interactive experience.
Core Technologies:
Frontend: React (functional components, hooks) with Vite for fast development.
Styling: Tailwind CSS for utility-first styling and responsiveness.
UI Components: shadcn/ui for high-quality, accessible, and customizable UI components (e.g., buttons, forms, tables, modals).
Icons: lucide-react for a wide range of vector icons.
Charts: recharts for visualizing user progress.
HTTP Client: fetch API or Axios for communicating with the backend.
Backend: Node.js with Express.js framework.
Database: PostgreSQL.
PostgreSQL Client/ORM: pg (Node.js PostgreSQL client) for database interactions.
Authentication: bcryptjs for password hashing, jsonwebtoken for JWT-based authentication.
Environment Variables: dotenv for managing sensitive information (database credentials, JWT secret).
Key Features and Modules:
Public-Facing Information Pages (CMS-driven - / or /info/:slug):
This section will serve as the public face of the club, with all content managed dynamically via an ExCo-only CMS.
Required Pages: The following distinct pages must be accessible:
"What is Gavel Club? - About Meraki Gavel Club of Danang"
"How does a club meeting work?"
"Rule - commitment"
"FAQ"
"Contact"
CMS Integration (ExCo Only - /exco/cms):
ExCo members will have a dedicated interface to create, edit, and publish the content for these static informational pages.
Content can include text, images, and basic formatting (e.g., Markdown or rich text editor output).
The frontend should dynamically fetch and render this content based on the page's unique slug.
Authentication & User Management:
User Registration Form (/register):
A dedicated, user-friendly form allowing new individuals to register with their email and password.
Backend must securely hash passwords using bcryptjs before storage in the PostgreSQL database.
New registrations should automatically be assigned the default member role.
User Login Form (/login):
Users log in using their registered email and password.
Upon successful authentication, the backend will issue a JSON Web Token (JWT), which the client stores (e.g., in localStorage) and includes in subsequent authenticated API requests.
JWT-based Authentication: All protected backend routes will require a valid JWT in the Authorization: Bearer <token> header for access verification.
Role-Based Access Control: Backend middleware will enforce role-based access, ensuring that only users with the exco role can access ExCo-specific features and API endpoints.
User Management (ExCo Only - /exco/users):
ExCo members can view a list of all users, add new users manually, edit existing user details (e.g., display name, activity status), and change user roles (e.g., promote a member to ExCo, or demote an ExCo member).
Meeting & Event Management (ExCo Only - /exco/meetings):
Create/Edit Meetings: Interface to schedule new meetings, setting dates, times, meeting themes, and physical/virtual locations.
Role Assignment: Ability to assign specific pre-defined roles (e.g., Toastmaster, General Evaluator, Speakers, Evaluators, Table Topics Master, Timer, Ah-Counter, Grammarian, Sergant-at-arms, Gavallier of the day, Mentor, Guest - as per image_c29829.png) to specific members for each meeting. A search functionality should be available when assigning roles (as hinted in the image).
Agenda Generation: Support for generating and viewing meeting agendas dynamically based on assigned roles and speech details.
Meeting Status: Mark meetings as "Upcoming," "In Progress," or "Completed."
Role & Content Linking:
Master Role List (ExCo Only - /exco/roles):
ExCo members can define and manage a master list of all available Gavel Club roles.
Role Content/Scripts (ExCo Only):
For each role in the master list, ExCo can upload or input detailed content (e.g., scripts, guidelines, tips, responsibilities for performing that role).
The content should support multiple languages if needed (e.g., for the provided Vietnamese/English content).
Member Role Access:
When a member is assigned a specific role for an upcoming meeting, their member dashboard should prominently display their assigned role.
A clear, accessible link or button should be provided next to their assigned role, allowing them to instantly view the associated role content/script relevant to their assigned duty for that meeting.
Meeting-Specific Features (Member & ExCo):
Attendance Tracking (ExCo Only - /exco/attendance): ExCo can mark attendance for each member at each meeting.
Meeting Minutes & Task Tracking (ExCo Only - /exco/minutes):
A dedicated section for ExCo to record official meeting minutes.
Ability to assign follow-up tasks to specific ExCo members, including a title, description, assigned member, due date, and status (e.g., "To Do," "In Progress," "Completed").
Tasks should ideally be linkable to specific meeting minutes.
Automated Reflection Form Link:
After each meeting is marked as "Completed," the system should automatically generate a unique link to its associated reflection form for the members who attended. This link should pass the meetingId parameter.
Member-Specific Features (Members - /member dashboard and sub-pages):
Upcoming Meetings: Members can view details of upcoming meetings, their assigned roles, and directly access their role's content/script.
User Reflection Form (/member/reflection/:meetingId):
A dedicated, multi-question form for members to submit reflections after each meeting they attend.
Content: The form must exactly match the layout, questions, and input types (text areas, radio buttons) as depicted in image_c2ef1a.png.
Questions include: "Tên của bạn là gì? (What is your name?)", "Hôm nay bạn cảm thấy thế nào sau buổi học? Và vì sao? (How do you feel today after class? And why?)", "Lớp học có giúp bạn tự tin hơn khi nói trước đám đông không? (Did the class help you feel more confident when speaking in front of a crowd?)" (with specific radio options), "Bạn thích nhất điều gì ở buổi sinh hoạt hôm nay? (What did you like most about today's session?)", "Bạn có gặp khó khăn gì trong buổi sinh hoạt hôm nay không? Nếu có...? (Was there anything difficult when you took this session? If any what is it?)", "Bạn muốn tụi mình giúp gì để bạn học tốt hơn? (What do you want us to do to help you study better?)".
Introductory Text: The form must be preceded by the exact introductory note shown in image_c2ef9d.png, including the "YOUR PERSONAL CLASS REFLECTION // NHÌN LẠI CUỐI BUỔI SINH HOẠT" title and the friendly messages in both Vietnamese and English (if implementing bilingualism, otherwise choose one).
Submission: Submissions are linked to the specific meetingId and the userId, and a user should only be able to submit one reflection per meeting.
User Progress (/member/progress):
Track speech completions, roles taken, and overall participation.
Visualize member progress over time using recharts (e.g., charts showing number of speeches completed, different roles taken, attendance trends).
User Learning & Quizzes (/member/learning):
Access learning materials (articles, videos, guides) uploaded by ExCo.
Take quizzes created by ExCo. View their scores and correct answers after submission. Quiz results should be saved to the database to track learning progress.
Database Schema (PostgreSQL Tables - Consolidated Structure):
users Table:
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
email VARCHAR(255) UNIQUE NOT NULL
password_hash VARCHAR(255) NOT NULL
display_name VARCHAR(255) NOT NULL
role VARCHAR(50) NOT NULL DEFAULT 'member' CHECK (role IN ('member', 'exco'))
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
last_login TIMESTAMP WITH TIME ZONE
is_active BOOLEAN DEFAULT TRUE
meetings Table:
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
title VARCHAR(255) NOT NULL
date DATE NOT NULL
time TIME NOT NULL
theme VARCHAR(255)
location VARCHAR(255)
status VARCHAR(50) DEFAULT 'upcoming' CHECK (status IN ('upcoming', 'in_progress', 'completed'))
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
roles Table (Master list of Gavel Club roles):
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
name VARCHAR(100) UNIQUE NOT NULL (e.g., 'Toastmaster', 'Grammarian', 'Sergant-at-arm', 'Gavailier of the day')
description TEXT
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
role_content Table (Scripts/Guidelines for Roles):
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
role_id UUID REFERENCES roles(id) ON DELETE CASCADE
content TEXT NOT NULL (the script/guidelines, supporting Markdown or HTML)
language VARCHAR(10) DEFAULT 'en' (e.g., 'en', 'vi' for bilingual content)
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
UNIQUE (role_id, language) - Ensures one script per role per language.
meeting_roles Table (Junction Table for Meeting & User Role Assignments):
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
meeting_id UUID REFERENCES meetings(id) ON DELETE CASCADE
user_id UUID REFERENCES users(id) ON DELETE CASCADE
role_id UUID REFERENCES roles(id) ON DELETE CASCADE -- Link to the master roles table
speech_title VARCHAR(255) (NULL if not a speaker role)
speech_objectives TEXT
UNIQUE (meeting_id, user_id, role_id) - Prevent duplicate assignments for the same role in a meeting.
attendance Table:
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
meeting_id UUID REFERENCES meetings(id) ON DELETE CASCADE
user_id UUID REFERENCES users(id) ON DELETE CASCADE
attended BOOLEAN NOT NULL DEFAULT FALSE
recorded_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
UNIQUE (meeting_id, user_id)
reflections Table (Detailed structure for the reflection form):
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
user_id UUID REFERENCES users(id) ON DELETE CASCADE
meeting_id UUID REFERENCES meetings(id) ON DELETE CASCADE
name_input VARCHAR(255) NOT NULL -- Corresponds to "Tên của bạn là gì?"
q1 TEXT NOT NULL -- "Hôm nay bạn cảm thấy thế nào sau buổi học? Và vì sao?"
q2 TEXT NOT NULL (q2_confidence_level IN ('yes_a_lot', 'yes_a_bit', 'no_didnt_see_it')) -- "Lớp học có giúp bạn tự tin hơn..."
q3 TEXT NOT NULL -- "Bạn thích nhất điều gì ở buổi sinh hoạt hôm nay?"
q4 TEXT NOT NULL -- "Bạn có gặp khó khăn gì... Nếu có...?"
q5 TEXT NOT NULL -- "Bạn muốn tụi mình giúp gì để bạn học tốt hơn?"
submitted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
UNIQUE (user_id, meeting_id) - A user can submit only one reflection per meeting.
Topic
id (UUID - Primary Key): A unique identifier for each content page. Generated automatically.
slug (VARCHAR(100) - Unique, Not Null): A short, URL-friendly string that uniquely identifies the page. This is what you would use in your frontend routing (e.g., /info/what-is-gavel-club). It ensures each public page has a distinct address.
title (VARCHAR(255) - Not Null): The human-readable title of the page that will be displayed in the browser tab and at the top of the content.
content (TEXT - Not Null): This is the core of the page. It will store the full textual and potentially formatted content (e.g., HTML, Markdown, or output from a rich text editor like TinyMCE or Quill). This allows ExCo to create rich, detailed pages.
is_published (BOOLEAN - Default FALSE): A flag that controls whether the page is visible to the public. ExCo can draft content and only publish it when ready.
created_at (TIMESTAMP WITH TIME ZONE): Automatically records the date and time when the page content was first created.
updated_at (TIMESTAMP WITH TIME ZONE): Automatically records the date and time when the page content was last modified.

content_pages Table (For CMS-driven static information pages):
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
slug VARCHAR(100) UNIQUE NOT NULL (e.g., 'what-is-gavel', 'how-meetings-work', 'faq', 'contact')
title VARCHAR(255) NOT NULL
content TEXT NOT NULL (The main body content of the page)
is_published BOOLEAN DEFAULT FALSE
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
learning_materials Table:
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
title VARCHAR(255) NOT NULL
description TEXT
type VARCHAR(50) NOT NULL CHECK (type IN ('article', 'video', 'guide'))
content_url TEXT (e.g., link to PDF, YouTube video)
created_by UUID REFERENCES users(id)
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
quizzes Table:
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
title VARCHAR(255) NOT NULL
learning_material_id UUID REFERENCES learning_materials(id) ON DELETE SET NULL
questions JSONB NOT NULL (store array of question objects, e.g., [{"q": "...", "options": ["...", "..."], "answer": "..."}])
created_by UUID REFERENCES users(id)
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
quiz_results Table:
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
quiz_id UUID REFERENCES quizzes(id) ON DELETE CASCADE
user_id UUID REFERENCES users(id) ON DELETE CASCADE
score INTEGER NOT NULL
total_questions INTEGER NOT NULL
submitted_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
answers_submitted JSONB (optional, to store user's choices for review)
exco_tasks Table:
id UUID PRIMARY KEY DEFAULT gen_random_uuid()
title VARCHAR(255) NOT NULL
description TEXT
assigned_to_user_id UUID REFERENCES users(id) ON DELETE SET NULL
due_date DATE
status VARCHAR(50) DEFAULT 'todo' CHECK (status IN ('todo', 'in_progress', 'completed'))
meeting_minutes_content TEXT (can be associated with specific minutes)
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
completed_at TIMESTAMP WITH TIME ZONE
Design and User Experience (UX):
Attractive Look: The application must have a clean, modern, and engaging UI. Leverage Tailwind CSS for flexible styling and shadcn/ui for polished, accessible components. Pay meticulous attention to typography, color palettes, spacing, and visual hierarchy. Elements should have subtle rounded corners and a polished feel.
Fully Responsive: The entire layout and all components must adapt seamlessly to various screen sizes, from mobile phones (small breakpoints) to tablets and large desktop monitors, using Tailwind's responsive utilities (sm:, md:, lg:). No horizontal scrolling should be present on any device.
Compact Navigation: Implement a compact and highly intuitive navigation system.
Desktop: Consider a collapsible sidebar or a sleek top navigation bar with dropdown menus to keep the interface clean and maximize content area.
Mobile: Utilize a prominent hamburger menu icon that, when tapped, expands into a full-screen or slide-out navigation drawer.
Ensure clear, distinct navigation items for public pages, general member sections, and ExCo-only administrative sections, with appropriate visual cues for active links.
User Feedback: Provide clear and immediate visual feedback for all user actions, including loading states for data fetching, success messages for submissions, and informative error messages for failed operations. Use custom modal components for user confirmations or critical alerts, avoiding native browser alert() or confirm() functions.
Replit Setup & Structure:
Backend (server.js or src/server.js):
Set up a Node.js Express server.
Include necessary middleware: cors (for frontend-backend communication), express.json() (for parsing request bodies), and custom middleware for JWT verification and role-based access control.
Define comprehensive API routes for all features listed above (/api/auth, /api/users, /api/meetings, /api/roles, /api/role-content, /api/reflections, /api/content-pages, /api/learning, /api/quizzes, /api/exco-tasks).

